local wk = require("which-key")
wk.add(
  {
    { "<leader>", group = "Plugins" },
    { "<leader>?", require("which-key").show, desc = "Buffer keymaps", noremap = true, silent = true },
    -- Default NVim mappings (https://neovim.io/doc/user/vim_diff.html#default-mappings)
    { "Y", mode = { "n" }, desc = "Yank till the end of the line (equivalent of y$)"},
    { "<C-u>", mode = { "i" }, desc = "Delete all entered characters before the cursor in the current line"},
    { "<C-w>", mode = { "i" }, desc = "Delete the word before the cursor"},
    { "<C-l>", mode = { "n", "i" }, desc = "Clear and redraw the screen"},
    { "&", mode = { "n" }, desc = "Repeat last substitute (synonym for :s)"},
    { "g&", mode = { "n" }, desc = "Repeat last substitute globally (synonym for :%s)"},
    { "g&", mode = { "n" }, desc = "Repeat last substitute globally (synonym for :%s)"},
    { "gr", mode = { "n" }, group = "LSP keymaps" },
    { "grn", mode = { "n" }, desc = "Rename all references to the symbol under the cursor" },
    { "grr", mode = { "n" }, desc = "List all the references to the symbol under the cursor in th quickfix window" },
    { "gra", mode = { "n" }, desc = "Select a code action available at the current cursor position" },
    { "gri", mode = { "n" }, desc = "List all the implementations for the symbol under the cursor in the quickfix window" },
    { "gO", mode = { "n" }, desc = "List all symbols in the current buffer in the location-list" },
    { "<C-s>", mode = { "i", "s" }, desc = "Display signature information about the symbol under the cursor in a floating window" },
    { "<C-w>d", mode = { "n" }, desc = "Show diagnostic under the cursor" },
    { "<C-w><C-d>", mode = { "n" }, desc = "Show diagnostic under the cursor" },
    { "K", mode = { "n" }, desc = "Display hover information about the symbol under the cursor in a floating window" },
    { "[", mode = { "n" }, group = "Previous/first ..." },
    { "]", mode = { "n" }, group = "Next/last ..." },
    { "[d", mode = { "n" }, desc = "Jump to the previous diagnostic in the current buffer (LSP diagnostics)" },
    { "]d", mode = { "n" }, desc = "Jump to the next diagnostic in the current buffer (LSP diagnostics)" },
    { "[D", mode = { "n" }, desc = "Jump to the first diagnostic in the current buffer (LSP diagnostics)" },
    { "]D", mode = { "n" }, desc = "Jump to the last diagnostic in the current buffer (LSP diagnostics)" },
    { "[q", mode = { "n" }, desc = "Jump to the previous entry (quickfix list)" },
    { "]q", mode = { "n" }, desc = "Jump to the next entry (quickfix list)" },
    { "]Q", mode = { "n" }, desc = "Jump to the first entry (quickfix list)" },
    { "]Q", mode = { "n" }, desc = "Jump to the last entry (quickfix list)" },
    { "[<C-q>", mode = { "n" }, desc = "Jump to the last entry in the previous file (quickfix list)" },
    { "]<C-q>", mode = { "n" }, desc = "Jump to the first entry int the next file (quickfix list)" },
    { "[l", mode = { "n" }, desc = "Jump to the previous entry (location list)" },
    { "]l", mode = { "n" }, desc = "Jump to the next entry (location list)" },
    { "]L", mode = { "n" }, desc = "Jump to the first entry (location list)" },
    { "]L", mode = { "n" }, desc = "Jump to the last entry (location list)" },
    { "[<C-l>", mode = { "n" }, desc = "Jump to the last entry in the previous file (location list)" },
    { "]<C-l>", mode = { "n" }, desc = "Jump to the first entry int the next file (location list)" },
    { "[t", mode = { "n" }, desc = "Jump to the previous matching tag" },
    { "]t", mode = { "n" }, desc = "Jump to the next matching tag" },
    { "]t", mode = { "n" }, desc = "Jump to the first matching tag" },
    { "]t", mode = { "n" }, desc = "Jump to the last matching tag" },
    { "[<C-t>", mode = { "n" }, desc = "Jump to the last matching tag" },
    { "]<C-t>", mode = { "n" }, desc = "Jump to the first matching tag" },
    { "[a", mode = { "n" }, desc = "Jump to the previous file in the argument list" },
    { "]a", mode = { "n" }, desc = "Jump to the next file in the argument list" },
    { "[A", mode = { "n" }, desc = "Jump to the first file in the argument list" },
    { "]A", mode = { "n" }, desc = "Jump to the last file in the argument list" },
    { "[b", mode = { "n" }, desc = "Jump to the previous buffer in the buffer list" },
    { "]b", mode = { "n" }, desc = "Jump to the next buffer in the buffer list" },
    { "[B", mode = { "n" }, desc = "Jump to the first buffer in the buffer list" },
    { "]B", mode = { "n" }, desc = "Jump to the last buffer in the buffer list" },
    { "[<space>", mode = { "n" }, desc = "Insert an empty line to the previous line" },
    { "]<space>", mode = { "n" }, desc = "Insert an empty line to the next line" },
    -- General
    { "<C-e>", mode = { "i", "s" }, desc = "Cancel/abort (blink.cmp, fzf-lua)", noremap = true, silent = true },
    { "<up>", mode = { "i", "s" }, desc = "Go to previous or go up (blink.cmp, fzf-lua)", noremap = true, silent = true },
    { "<C-p>", mode = { "i", "s" }, desc = "Go to previous or go up (blink.cmp, fzf-lua)", noremap = true, silent = true },
    { "<down>", mode = { "i", "s" }, desc = "Go to next or go down (blink.cmp, fzf-lua)", noremap = true, silent = true },
    { "<C-n>", mode = { "i", "s" }, desc = "Go to next or go down (blink.cmp, fzf-lua)", noremap = true, silent = true },
    { "<C-y>", mode = { "i", "s" }, desc = "Accept (blink.cmp, fzf-lua)", noremap = true, silent = true },
    -- blink.cmp (default settings)
    { "<C-space>", mode = { "i" }, desc = "Show completion list or documentation or hide documentation", noremap = true, silent = true },
    { "<C-b>", mode = { "i" }, desc = "Scroll documentation up", noremap = true, silent = true },
    { "<C-f>", mode = { "i" }, desc = "Scroll documentation down", noremap = true, silent = true },
    { "<tab>", mode = { "i", "s" }, desc = "Snippet forward", noremap = true, silent = true },
    { "<S-tab>", mode = { "i", "s" }, desc = "Snippet backwards", noremap = true, silent = true },
    { "<C-k>", mode = { "i", "s" }, desc = "Show signature", noremap = true, silent = true },
    { "<A-1>", mode = { "i", "s" }, desc = "Select 1st suggestion", noremap = true, silent = true },
    { "<A-2>", mode = { "i", "s" }, desc = "Select 2nd suggestion", noremap = true, silent = true },
    { "<A-3>", mode = { "i", "s" }, desc = "Select 3th suggestion", noremap = true, silent = true },
    { "<A-4>", mode = { "i", "s" }, desc = "Select 4th suggestion", noremap = true, silent = true },
    { "<A-5>", mode = { "i", "s" }, desc = "Select 5th suggestion", noremap = true, silent = true },
    { "<A-6>", mode = { "i", "s" }, desc = "Select 6th suggestion", noremap = true, silent = true },
    { "<A-7>", mode = { "i", "s" }, desc = "Select 7th suggestion", noremap = true, silent = true },
    { "<A-8>", mode = { "i", "s" }, desc = "Select 8th suggestion", noremap = true, silent = true },
    { "<A-9>", mode = { "i", "s" }, desc = "Select 9th suggestion", noremap = true, silent = true },
    { "<A-0>", mode = { "i", "s" }, desc = "Select 10th suggestion", noremap = true, silent = true },
    -- DAP
    { "<F5>", "<cmd>DapContinue<cr>", mode = { "n", "i", "v" }, desc = "Start/continue debug", noremap = true, silent = true },
    { "<F5>", require("dap-python").debug_selection, mode = { "s" }, desc = "Debug the code (Python)", noremap = true, silent = true },
    { "<C-F5>", require("dap").run_to_cursor, mode = { "n", "i", "v", "s" }, desc = "Run to cursor", noremap = true, silent = true },
    { "<S-F5>", "<cmd>DapTerminate<cr>", mode = { "n", "i", "v", "s" }, desc = "Stop debugger", noremap = true, silent = true },
    { "<C-S-F5>", require("dap").restart, mode = { "n", "i", "v", "s" }, desc = "Restart debugger", noremap = true, silent = true },
    { "<F9>", "<cmd>DapToggleBreakpoint<cr>", mode = { "n", "i", "v", "s" }, desc = "Toggle breakpoint", noremap = true, silent = true },
    { "<S-F9>", "<cmd>DapClearBreakPoints<cr>", mode = { "n", "i", "v", "s" }, desc = "Clear breakpoints", noremap = true, silent = true },
    { "<C-S-F9>", function() require("dap").set_breakpoint(vim.fn.input('Breakpoint condition: ')) end, mode = { "n", "i", "v", "s" }, desc = "Set conditional breakpoint", noremap = true, silent = true },
    { "<F10>", "<cmd>DapStepOver<cr>", mode = { "n", "i", "v", "s" }, desc = "Step over", noremap = true, silent = true },
    { "<F11>", "<cmd>DapSetpInto<cr>", mode = { "n", "i", "v", "s" }, desc = "Step into", noremap = true, silent = true },
    { "<S-F11>", "<cmd>DapStepOut<cr>", mode = { "n", "i", "v", "s" }, desc = "Step out", noremap = true, silent = true },
    { "<F12>", require("dap-python").test_method, mode = { "n", "i", "v", "s" }, desc = "Test method (Python)"},
    { "<S-F12>", require("dap-python").test_class, mode = { "n", "i", "v", "s" }, desc = "Test class (Python)"},
    { "dr", "<cmd>DapToggleRepl<cr>", mode = { "n" }, desc = "Toggle REPL", noremap = true, silent = true },
    { "dp", require("dap.ui.widgets").preview, mode = { "n" }, desc = "Preview in debug", noremap = true, silent = true },
    { "dK", require("dap.ui.widgets").hover, mode = { "n" }, desc = "Hover in debug", noremap = true, silent = true },
    -- DAP UI
    { "du", require("dapui").toggle, mode = { "n" }, desc = "Toggle REPL", noremap = true, silent = true },
    -- fzf-lua
    { "<leader>f", group = "fzf" },
    { "<leader>f<leader>", "<cmd>FzfLua<cr>", mode = { "n" }, desc = "Fzf overview", noremap = true, silent = true },
    { "<leader>fb", require("fzf-lua").buffers, mode = { "n" }, desc = "Fzf buffers", noremap = true, silent = true },
    { "<leader>ff", require("fzf-lua").files, mode = { "n" }, desc = "Fzf files", noremap = true, silent = true },
    { "<leader>fh", require("fzf-lua").files, mode = { "n" }, desc = "Fzf opened files history", noremap = true, silent = true },
    { "<leader>fl", require("fzf-lua").live_grep_native, mode = { "n" }, desc = "Live grep current project", noremap = true, silent = true },
    { "<leader>fq", require("fzf-lua").quickfix, mode = { "n" }, desc = "Fzf quickfix list", noremap = true, silent = true },
    { "<leader>fr", require("fzf-lua").resume, mode = { "n" }, desc = "Resuming work from where left off", noremap = true, silent = true },
    { "<leader>fT", require("fzf-lua").tabs, mode = { "n" }, desc = "Fzf open tabs", noremap = true, silent = true },
    { "<leader>fd", group = "Diagnostics & LSP" },
    { "<leader>fdr", require("fzf-lua").lsp_references, mode = { "n" }, desc = "References", noremap = true, silent = true },
    { "<leader>fdd", require("fzf-lua").lsp_definitions, mode = { "n" }, desc = "Definitions", noremap = true, silent = true },
    { "<leader>fdD", require("fzf-lua").lsp_declarations, mode = { "n" }, desc = "Declarations", noremap = true, silent = true },
    { "<leader>fdt", require("fzf-lua").lsp_typedefs, mode = { "n" }, desc = "Type definitions", noremap = true, silent = true },
    { "<leader>fdi", require("fzf-lua").lsp_implementations, mode = { "n" }, desc = "Implementations", noremap = true, silent = true },
    { "<leader>fds", require("fzf-lua").lsp_document_symbols, mode = { "n" }, desc = "Document symbols", noremap = true, silent = true },
    { "<leader>fdS", require("fzf-lua").lsp_workspace_symbols, mode = { "n" }, desc = "Workspace symbols", noremap = true, silent = true },
    { "<leader>fd<C-s>", require("fzf-lua").lsp_live_workspace_symbols, mode = { "n" }, desc = "Workspace symbols (live query)", noremap = true, silent = true },
    { "<leader>fdc", require("fzf-lua").lsp_incoming_calls, mode = { "n" }, desc = "Incoming calls", noremap = true, silent = true },
    { "<leader>fdC", require("fzf-lua").lsp_outcoming_calls, mode = { "n" }, desc = "Incoming calls", noremap = true, silent = true },
    { "<leader>fda", require("fzf-lua").lsp_code_actions, mode = { "n" }, desc = "Code actions", noremap = true, silent = true },
    { "<leader>fdf", require("fzf-lua").lsp_finder, mode = { "n" }, desc = "Finder - all LSP locations & combined view", noremap = true, silent = true },
    { "<leader>fd<C-d>", require("fzf-lua").diagnostics_document, mode = { "n" }, desc = "Document diagnostics", noremap = true, silent = true },
    { "<leader>fd<C-w>", require("fzf-lua").diagnostics_workspace, mode = { "n" }, desc = "Workspace diagnostics", noremap = true, silent = true },
    { "<leader>fg", group = "Git" },
    { "<leader>fgf", require("fzf-lua").git_files, mode = { "n" }, desc = "git ls-files", noremap = true, silent = true },
    { "<leader>fgs", require("fzf-lua").git_status, mode = { "n" }, desc = "git status", noremap = true, silent = true },
    { "<leader>fgc", require("fzf-lua").git_bcommits, mode = { "n" }, desc = "git commit log (in buffer)", noremap = true, silent = true },
    { "<leader>fgC", require("fzf-lua").git_commits, mode = { "n" }, desc = "git commit log (in project)", noremap = true, silent = true },
    { "<leader>fgb", require("fzf-lua").git_branches, mode = { "n" }, desc = "git branches", noremap = true, silent = true },
    { "<leader>fgB", require("fzf-lua").git_blame, mode = { "n" }, desc = "git blame", noremap = true, silent = true },
    { "<leader>fgt", require("fzf-lua").git_tags, mode = { "n" }, desc = "git tags", noremap = true, silent = true },
    { "<leader>fgS", require("fzf-lua").git_stash, mode = { "n" }, desc = "git stash", noremap = true, silent = true },
    { "<leader>fs", group = "Search" },
    { "<leader>fsb", require("fzf-lua").lgrep_curbuf, mode = { "n" }, desc = "Live grep current buffer", noremap = true, silent = true },
    { "<leader>fsq", require("fzf-lua").lgrep_quickfix, mode = { "n" }, desc = "Live grep quickfix list", noremap = true, silent = true },
    { "<leader>fsl", require("fzf-lua").lgrep_loclist, mode = { "n" }, desc = "Live grep location list", noremap = true, silent = true },
    { "<leader>fst", require("fzf-lua").tags_live_grep, mode = { "n" }, desc = "Live grep project tags", noremap = true, silent = true },
    { "<leader>fsT", require("fzf-lua").tags_grep, mode = { "n" }, desc = "Grep project tags", noremap = true, silent = true },
    { "<leader>fsg", require("fzf-lua").tags_grep, mode = { "n" }, desc = "Grep a pattern in the current project", noremap = true, silent = true },
    { "<leader>fsl", require("fzf-lua").grep_last, mode = { "n" }, desc = "Run search again with the last pattern", noremap = true, silent = true },
    { "<leader>fsw", require("fzf-lua").grep_cword, mode = { "n" }, desc = "Search word under the cursor", noremap = true, silent = true },
    { "<leader>fsW", require("fzf-lua").grep_cWord, mode = { "n" }, desc = "Search WORD under the cursor", noremap = true, silent = true },
    { "<leader>fsv", require("fzf-lua").grep_visual, mode = { "n" }, desc = "Search visual selection", noremap = true, silent = true },
    { "<leader>fsB", require("fzf-lua").grep_curbuf, mode = { "n" }, desc = "Grep current buffer", noremap = true, silent = true },
    { "<leader>fsQ", require("fzf-lua").grep_quickfix, mode = { "n" }, desc = "Grep quickfix list", noremap = true, silent = true },
    { "<leader>fsL", require("fzf-lua").grep_loclist, mode = { "n" }, desc = "Grep location list", noremap = true, silent = true },
    { "<leader>ft", group = "Tags" },
    { "<leader>ftt", require("fzf-lua").tags, mode = { "n" }, desc = "Search project tags", noremap = true, silent = true },
    { "<leader>ftb", require("fzf-lua").btags, mode = { "n" }, desc = "Search buffer tags", noremap = true, silent = true },
    { "<leader>ftw", require("fzf-lua").tag_grep_cword, mode = { "n" }, desc = "Tags grep word under the cursor", noremap = true, silent = true },
    { "<leader>ftW", require("fzf-lua").tag_grep_cWord, mode = { "n" }, desc = "Tags grep WORD under the cursor", noremap = true, silent = true },
    { "<leader>ftv", require("fzf-lua").tag_grep_visual, mode = { "n" }, desc = "Tags grep visual selection", noremap = true, silent = true },
    { "<leader>fx", group = "Extra"},
    { "<leader>fxa", require("fzf-lua").args, mode = { "n" }, desc = "Fzf argument list", noremap = true, silent = true },
    { "<leader>fxc", require("fzf-lua").command_history, mode = { "n" }, desc = "Fzf command history", noremap = true, silent = true },
    { "<leader>fxl", require("fzf-lua").loclist, mode = { "n" }, desc = "Fzf location list", noremap = true, silent = true },
    { "<leader>fxL", require("fzf-lua").loclist_stack, mode = { "n" }, desc = "Fzf location stack", noremap = true, silent = true },
    { "<leader>fxr", require("fzf-lua").registers, mode = { "n" }, desc = "Fzf registers", noremap = true, silent = true },
    { "<leader>fxs", require("fzf-lua").search_history, mode = { "n" }, desc = "Fzf search history", noremap = true, silent = true },
    { "<leader>fxt", require("fzf-lua").args, mode = { "n" }, desc = "Ffzf current buffer treesitter symbols", noremap = true, silent = true },
    -- KeyAnalyzer
    { "<leader>k", function() require("key-analyzer").show(vim.fn.input("Choose mode (n, i, v, s): "), vim.fn.input("Show mapping prefix (e.g: <leader>, <C-, etc.): ")) end, mode = { "n" }, desc = "Key Analyzer", noremap = true, silent = true },
    -- LSP
    { "gd", vim.lsp.buf.definition, mode = { "n" }, desc = "Jump to the definition of the symbol under the cursor", noremap = true, silent = true },
    { "gD", vim.lsp.buf.declaration, mode = { "n" }, desc = "Jump to the declaration of the symbol under the cursor", noremap = true, silent = true },
    { "grt", vim.lsp.buf.type_definition, mode = { "n" }, desc = "Jump to the definition of the type of the symbol under the cursor", noremap = true, silent = true },
    { "grf", vim.lsp.buf.format, mode = { "n" }, desc = "Format a buffer using the attached (and optionally filtered) language server clients", noremap = true, silent = true },
    { "grs", vim.lsp.buf.document_symbol, mode = { "n" }, desc = "List all symbols in the current buffer in the location list", noremap = true, silent = true },
    -- mini.jump2d
    { "<cr>", mode = { "n", "v" }, desc = "Jump within vsible lines", noremap = true, silent = true },
    -- Treesitter
    { "gn", group = "Treesitter keymaps" },
    { "gnd", mode = "n", desc = "Go to definition" },
    { "gnO", mode = "n", desc = "List definitions ToC" },
    { "gnn", mode = "n", desc = "Go to next usage" },
    { "gnp", mode = "n", desc = "Go to previous usage" },
    -- Trouble
    { "<leader>t", group = "Trouble keymaps" },
    { "<leader>t", mode = { "n" }, desc = "", noremap = true, silent = true },
    -- Twilight
    { "<A-t>", "<cmd>Twilight<cr>", mode = { "n", "i", "v", "s" }, desc = "Toggle Twilight"}
  }
)
-- TODO: read and add https://neovim.io/doc/user/vim_diff.html#default-mappings, add Trouble key bindings, add fzf-lua key bindings
